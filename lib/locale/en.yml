en:
  json_skooma:
    errors:
      allOf: "The instance is invalid against subschemas %{error_indexes}"
      anyOf: "The instance must be valid against at least one subschema"
      const: "The instance value %<instance_value>p must be equal to the defined constant %<schema_value>p"
      contains: "The array does not contain any element that is valid against the `contains` subschema"
      dependentRequired: "The object is missing dependent properties %{missing_keys}"
      dependentSchemas: "Properties %{error_keys} are invalid against the corresponding `dependentSchemas` subschemas"
      enum: "The instance value %<instance_value>p must be equal to one of the elements in the defined enumeration: %{schema_value}"
      exclusiveMaximum: "The value must be less than %{schema_value}"
      exclusiveMinimum: "The value must be greater than %{schema_value}"
      false: "The instance is disallowed by a boolean false schema"
      format: "The instance is invalid against the %{schema_value} format: %{validation_message}"
      maxContains: "The array has too many elements matching the contains subschema (maximum %{schema_value})"
      maximum: "The value may not be greater than %{schema_value}"
      maxItems: "The array has too many elements (maximum %{schema_value})"
      maxLength: "The text is too long (maximum %{schema_value} characters)"
      maxProperties: "The object has too many properties (maximum %{schema_value})"
      minContains: "The array has too few elements matching the `contains` subschema (minimum %{schema_value})"
      minimum: "The value may not be less than %{schema_value}"
      minItems: "The array has too few elements (minimum %{schema_value})"
      minLength: "The text is too short (minimum %{schema_value} characters))"
      minProperties: "The object has too few properties (minimum %{schema_value})"
      multipleOf: "The value must be a multiple of %{schema_value}"
      not: "The instance must not be valid against the subschema"
      oneOf: "The instance must be valid against exactly one subschema, but it is valid against %{valid_indexes} and invalid against %{error_indexes}"
      pattern: "The text must match the regular expression %{schema_value}"
      patternProperties: "Invalid properties: %{error_keys}"
      properties: "Invalid properties: %{error_keys}"
      required: "The object is missing required properties %{schema_value}"
      type: "The instance must be of type %{schema_value}, but was %{instance_type}"
      uniqueItems: "The array's elements must all be unique"

      validation_errors:
        date: "must be a valid RFC 3339 date string"
        date-time: "must be a valid RFC 3339 date string"
        duration: "must be a valid duration"
        email: "must be a valid email"
        idn-email: "must be a valid IDN email"
        hostname: "must be a valid hostname"
        idn-hostname: "must be a valid IDN hostname: %{message}"
        ipv4: "must be a valid IPv4 address"
        ipv6: "must be a valid IPv6 address"
        iri: "must be a valid IRI"
        iri-reference: "must be a valid IRI reference"
        uri: "must be a valid URI"
        uri-reference: "must be a valid URI reference"
        uuid: "must be a valid UUID"
        uri-template: "must be a valid URI template"
        json-pointer: "must be a valid JSON pointer"
        relative-json-pointer: "must be a valid relative JSON pointer"
        regex: "must be a valid relative Regex: %{message}"
